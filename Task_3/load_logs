import pathlib
import os

def parse_log_line(log: str) -> dict:
    lines = log.strip().split('\n')
    values_dic = []
    for line in lines:
        values = line.strip().split(' ')
        dic_record = {
            "date": values[0] if len(values) > 0 else "",
            "time": values[1] if len(values) > 1 else "",
            "error type": values[2] if len(values) > 2 else "",
            "message": " ".join(values[3:]) if len(values) > 3 else ""
        }
        values_dic.append(dic_record)
    return values_dic

def load_logs(file_path: str) -> list:
    path = pathlib.Path(file_path)
    "Check file integrity and availability"
    if not path.exists():
        return f"Error: File '{path}' does not exist or the path is wrong."
    if not path.is_file():
        return f"Error: '{path}' is not a file."
    if not os.access(path, os.R_OK):
        return f"Error: File '{path}' is not readable."
    if path.stat().st_size == 0:
        return f"Error: File '{path}' is empty."

    try:
        with path.open("r", encoding="utf-8") as file:
            logs_list = file.read()
            return parse_log_line(logs_list)
    except UnicodeDecodeError:
        return f"Error: The file '{file_path}' is not a valid UTF-8 encoded text file."
    except Exception as e:
        return f"An unexpected error occurred while reading '{file_path}': {e}"


logs_path = "/Users/yurii/Documents/VScode_projects/Module_5/goit-algo-hw-05/Task_3/logfile.log"

my_list = load_logs(logs_path)


def filter_logs_by_level(logs: list, level: str) -> list:
    # filtered_list = []
    # for item in logs:
    #     print(item)
    filtered_list = [item for item in logs if level == item['error type']]
    return filtered_list

def count_logs_by_level(logs: list) -> dict:
    counted_logs = {}
    for log in logs:
        if log['error type'] in counted_logs:
            value = log['error type']
            counted_logs[value] += 1
        else:
            value = log['error type']
            counted_logs[value] = 1
    return counted_logs


counted_logs = count_logs_by_level(my_list)


def display_log_counts(counts: dict, log_details=None):
    if not counts:
        print("No log counts to display.")
        return
    
    highest_value = max(counts.values())
    highest_key = [key for key, value in counts.items() if value == highest_value]

    sorted_by_value = sorted(counts.items(), key=lambda item: item[1], reverse=True)
    print("""
Рівень логування | Кількість
-----------------|---------- """)
    logs_list = load_logs(logs_path)

    for key, value in sorted_by_value:
        logs_list = load_logs(logs_path)
        print(f"{key:<17}| {value}")

    if log_details:
        f_logs = [i for i in logs_list if i['error type'].lower() == log_details.lower()]
        for value in f_logs:
            print(f"{value['date']} {value['time']} - {value['message']}")


display_log_counts(counted_logs, "info")
